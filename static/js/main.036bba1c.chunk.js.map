{"version":3,"sources":["logo.svg","serviceWorker.js","App.js","Googlelogin.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","dat","logout","response","reload","console","log","fetch","then","res","json","data","App","className","clientId","buttonText","onLogoutSuccess","map","card","index","Card","border","style","width","height","Header","Body","Title","Text","quote","responseGoogle","error","ReactDOM","render","StrictMode","src","profileObj","imageUrl","givenName","familyName","document","getElementById","Googlelogin","onSuccess","isSignedIn","onFailure","cookiePolicy","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,6GCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICHFC,E,4CANEC,G,MAAS,SAACC,GACdN,OAAOC,SAASM,QAAO,GACvBC,QAAQC,IAAIH,KAMZI,MAAM,uEACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJV,EAAIU,EACJN,QAAQC,IAAIL,MA4CDW,MAxCf,WAoBE,OACE,6BACE,yBAAKC,UAAU,OACf,kBAAC,eAAD,CACAC,SAAS,2EACTC,WAAW,SACXC,gBAAiBd,KAInB,yBAAKW,UAAU,eAGRZ,EAAIgB,KA/BM,SAACC,EAAMC,GACxB,OAGI,yBAAKN,UAAU,gBACb,kBAACO,EAAA,EAAD,CAAMC,OAAO,UAAUC,MAAO,CAAEC,MAAO,QAASC,OAAQ,UACtD,kBAACJ,EAAA,EAAKK,OAAN,sBACA,kBAACL,EAAA,EAAKM,KAAN,KACA,kBAACN,EAAA,EAAKO,MAAN,qBAA0BR,GACxB,6BACA,kBAACC,EAAA,EAAKQ,KAAN,CAAWf,UAAU,WAAWK,EAAKW,gBC9B7CC,EAAiB,SAAC3B,GAClBA,EAAS4B,OACXC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,yBAAKrB,UAAU,iBACb,yBAAKsB,IAAKhC,EAASiC,WAAWC,WAC9B,8BAEA,yBAAKxB,UAAU,UACf,2BAAG,oCAAUV,EAASiC,WAAWE,UAA9B,IAA0CnC,EAASiC,WAAWG,cAGnE,kBAAC,EAAD,OAEFC,SAASC,eAAe,UAmBfC,MAff,WACE,OACE,yBAAK7B,UAAU,eACb,kBAAC,IAAD,CACEC,SAAS,2EACTC,WAAW,gCACX4B,UAAWb,EACXc,YAAY,EACZC,UAAWf,EACXgB,aAAc,yB,MCxBtBd,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEE,kBAAC,EAAD,OAEFM,SAASC,eAAe,SHoHpB,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAArB,GACL1B,QAAQ0B,MAAMA,EAAMsB,c","file":"static/js/main.036bba1c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Button from 'react-bootstrap/Button'\nimport {Card, CardGroup, CardColumns, CardDeck} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { GoogleLogout } from 'react-google-login';\n\nconst logout = (response) => {\n  window.location.reload(false);\n  console.log(response)\n}\n\n\nlet dat;\n\n  fetch(`https://raw.githubusercontent.com/SatyamAnand98/data/master/db.json`)\n  .then(res => res.json())\n  .then(data => {\n    dat=data;\n    console.log(dat)\n  })\n\n\nfunction App() {\n\n  const rendercard = (card, index) => {\n    return(\n      // <div class=\"col-3\">\n        //<div class=\"card card-block\">\n        <div className=\"cardsspacing\">\n          <Card border=\"primary\" style={{ width: '25rem', height: '17rem' }}>\n            <Card.Header>I8LABS QUOTES</Card.Header>\n            <Card.Body>\n            <Card.Title>Quote Number {index}</Card.Title>\n              <br></br>\n              <Card.Text className=\"scrolls\">{card.quote}</Card.Text>\n            </Card.Body>\n          </Card>\n        </div>\n      // </div>\n    )\n  }\n\n  return (\n    <div>\n      <div className=\"yel\">\n      <GoogleLogout\n      clientId=\"425979505207-n65vk709tfclnajjqs4lsn3ftjpn7ipb.apps.googleusercontent.com\"\n      buttonText=\"Logout\"\n      onLogoutSuccess={logout}\n    >\n    </GoogleLogout>\n      </div>\n    <div className=\"scrolld App\">\n      {/* <div class=\"container-fluid\">\n        <div class=\"row flex-row flex-nowrap\"> */}\n          {dat.map(rendercard)}\n        </div>\n       </div>\n    // </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GoogleLogin from 'react-google-login';\nimport './Googlelogin.css';\nimport App from './App'\n \n \nconst responseGoogle = (response) => {\n  if(!response.error){\n    ReactDOM.render(\n      <React.StrictMode>\n        <div className=\"googledetails\">\n          <img src={response.profileObj.imageUrl}></img>\n          <br></br>\n          </div>\n          <div className=\"detail\">\n          <a><b>Hello {response.profileObj.givenName} {response.profileObj.familyName}</b></a>\n          </div>\n        \n        <App />\n      </React.StrictMode>,\n      document.getElementById('root')\n    );\n  }\n}\nfunction Googlelogin(){\n  return(\n    <div className=\"googlelogin\">\n      <GoogleLogin\n        clientId=\"425979505207-n65vk709tfclnajjqs4lsn3ftjpn7ipb.apps.googleusercontent.com\"\n        buttonText=\"Login to i8 labs Using Google\"\n        onSuccess={responseGoogle}\n        isSignedIn={true}\n        onFailure={responseGoogle}\n        cookiePolicy={'single_host_origin'}\n      />\n    </div>\n  );\n}\n\nexport default Googlelogin;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import GoogleLogin from 'react-google-login';\nimport Googlelogin from './Googlelogin'\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    <Googlelogin />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}